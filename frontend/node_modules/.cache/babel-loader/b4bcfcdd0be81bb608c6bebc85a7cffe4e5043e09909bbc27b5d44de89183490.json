{"ast":null,"code":"import { cartActions } from './cart_slice';\nimport { uiActions } from './ui_slice';\nimport { redirect } from 'react-router-dom';\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const id = JSON.parse(localStorage.getItem('cartId'));\n      console.log(id);\n      if (!id) throw new Error('Your cart is empty');\n      const response = await fetch('http://localhost:5000/cart/' + id);\n      if (!response) {\n        console.log(response);\n        throw new Error('Your cart is empty!');\n      }\n      console.log(response);\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      // console.log(\"in fetch cart--items:\"+cartData.items[0].image+\" qty:\"+cartData.totalQuantity);\n\n      console.log(cartData);\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity || 0,\n        totalAmount: cartData.totalAmount || 0,\n        isInitial: false\n      }));\n    } catch (error) {\n      console.log(error);\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: error.message\n      }));\n      dispatch(cartActions.replaceCart({\n        items: [],\n        totalQuantity: 0,\n        totalAmount: 0,\n        isInitial: false\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    /*dispatch(uiActions.showNotification({\r\n        status: 'Pending',\r\n        title: 'Sending',\r\n        message:'Sending cart data',\r\n    }));*/\n\n    const sendData = async () => {\n      if (cart.changed === false) return;\n      const response = null;\n      const cart_id = JSON.parse(localStorage.getItem('cartId'));\n      console.log(cart_id, cart);\n      if (cart_id) {\n        //Cart is already created for this user- PUT request to add/delete items to the cart\n\n        // if all items in the cart are deleted, delete record from cart table\n\n        if (cart.items.length === 0) {\n          const response = await fetch(`http://localhost:5000/cart/${cart_id}`, {\n            method: 'DELETE'\n          });\n          localStorage.removeItem('cartId');\n        } else {\n          const response = await fetch('http://localhost:5000/cart/' + cart_id, {\n            method: 'PUT',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              items: cart.items,\n              totalQuantity: cart.totalQuantity,\n              totalAmount: cart.totalAmount\n            })\n          });\n        }\n        if (!response) {\n          throw new Error('Sending cart data failed');\n        }\n      } else {\n        // Cart does not exist for this user so creating it with POST request\n        console.log(\"no cart yet\");\n        const response = await fetch('http://localhost:5000/cart', {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            items: cart.items,\n            totalQuantity: cart.totalQuantity,\n            totalAmount: cart.totalAmount\n          })\n        });\n        if (!response) {\n          throw new Error('Sending cart data failed');\n        }\n        cart = await response.json();\n        console.log(\"response\", cart._id);\n        localStorage.setItem(\"cartId\", JSON.stringify(cart._id));\n\n        //get user from local storage if user has already logged in and set cartId in user table\n\n        /*const user=JSON.parse(localStorage.getItem('userData'))\r\n        console.log(user);\r\n        if(user){\r\n        const user_id=user.userId;\r\n          if(user_id){\r\n            console.log(\"user: \",user_id);\r\n            const response=await fetch(\r\n                'http://localhost:5000/user',\r\n            {\r\n                method: 'PUT',\r\n                headers:{'content-type':'application/json'},\r\n                body:JSON.stringify({\r\n                  id:user_id,\r\n                  cart_id:cart._id})\r\n            })\r\n                 if (!response){\r\n                throw new Error('Updating User failed');\r\n            }\r\n          }\r\n        }*/\n      }\n      cart.changed = false;\n    };\n    try {\n      await sendData();\n    } catch (error) {\n      console.log(error);\n      /*dispatch(\r\n       uiActions.showNotification({\r\n          status:'error',\r\n          title: 'Error!',\r\n          message: 'Could not send cart data',\r\n      }\r\n      ));*/\n    }\n  };\n};","map":{"version":3,"names":["cartActions","uiActions","redirect","fetchCartData","dispatch","fetchData","id","JSON","parse","localStorage","getItem","console","log","Error","response","fetch","data","json","cartData","replaceCart","items","totalQuantity","totalAmount","isInitial","error","showNotification","status","title","message","sendCartData","cart","sendData","changed","cart_id","length","method","removeItem","headers","body","stringify","_id","setItem"],"sources":["C:/manjusha/React/12-adv-starting-project/frontend/src/Store/cart_actions.js"],"sourcesContent":["import { cartActions } from './cart_slice';\r\nimport {uiActions } from './ui_slice';\r\nimport {redirect} from 'react-router-dom';\r\n\r\nexport const fetchCartData=()=>{\r\n    return async (dispatch)=>{\r\n        const fetchData=async()=>{\r\n            const id=JSON.parse(localStorage.getItem('cartId'));\r\n            console.log(id);\r\n            if(! id)\r\n                throw new Error('Your cart is empty');\r\n            const response=await fetch('http://localhost:5000/cart/'+id);\r\n            if(! response){\r\n            console.log(response);\r\n                throw new Error('Your cart is empty!');\r\n            }\r\n            console.log(response);\r\n            const data=await response.json();\r\n            return data;\r\n        };\r\n        try{\r\n            const cartData=await fetchData();\r\n       // console.log(\"in fetch cart--items:\"+cartData.items[0].image+\" qty:\"+cartData.totalQuantity);\r\n\r\n        console.log(cartData);\r\n            dispatch(\r\n                cartActions.replaceCart({\r\n                items:cartData.items || [],\r\n                totalQuantity:cartData.totalQuantity||0,\r\n                totalAmount:cartData.totalAmount||0,\r\n                isInitial:false\r\n                })\r\n            )\r\n        }catch(error){\r\n        console.log(error);\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'error',\r\n                title:  'Error!',\r\n                message: error.message,\r\n                })\r\n            );\r\n\r\n            dispatch(\r\n                cartActions.replaceCart({\r\n                items:[],\r\n                totalQuantity:0,\r\n                totalAmount:0,\r\n                isInitial:false\r\n                })\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendCartData=(cart)=>{\r\n    return async(dispatch) => {\r\n        /*dispatch(uiActions.showNotification({\r\n            status: 'Pending',\r\n            title: 'Sending',\r\n            message:'Sending cart data',\r\n        }));*/\r\n\r\n\r\n        const sendData=async()=>{\r\n            if(cart.changed===false) return;\r\n            const response=null;\r\n            const cart_id=JSON.parse(localStorage.getItem('cartId'));\r\n            console.log(cart_id, cart);\r\n            if( cart_id ){\r\n        //Cart is already created for this user- PUT request to add/delete items to the cart\r\n\r\n            // if all items in the cart are deleted, delete record from cart table\r\n\r\n                if(cart.items.length===0){\r\n                      const response=await fetch(\r\n                        `http://localhost:5000/cart/${cart_id}`,\r\n                        { method:'DELETE'}\r\n                      );\r\n                      localStorage.removeItem('cartId');\r\n                }\r\n                else{\r\n                const response=await fetch(\r\n                    'http://localhost:5000/cart/'+cart_id,\r\n                    {\r\n                        method: 'PUT',\r\n                        headers:{'content-type':'application/json'},\r\n                        body:JSON.stringify({\r\n                          items:cart.items,\r\n                          totalQuantity:cart.totalQuantity,\r\n                          totalAmount:cart.totalAmount\r\n                        })\r\n                    }\r\n                );\r\n                }\r\n                if (!response){\r\n                    throw new Error('Sending cart data failed');\r\n                }\r\n            }\r\n            else\r\n            {\r\n        // Cart does not exist for this user so creating it with POST request\r\nconsole.log(\"no cart yet\");\r\n            const response=await fetch(\r\n                'http://localhost:5000/cart',\r\n                {\r\n                    method: 'POST',\r\n                    headers:{'content-type':'application/json'},\r\n                    body:JSON.stringify({\r\n                      items:cart.items,\r\n                      totalQuantity:cart.totalQuantity,\r\n                      totalAmount:cart.totalAmount\r\n                    })\r\n                }\r\n            );\r\n                if (!response){\r\n                    throw new Error('Sending cart data failed');\r\n                }\r\n                cart= await response.json();\r\n                console.log(\"response\",cart._id);\r\n                localStorage.setItem(\"cartId\",JSON.stringify(cart._id));\r\n\r\n\r\n//get user from local storage if user has already logged in and set cartId in user table\r\n\r\n            /*const user=JSON.parse(localStorage.getItem('userData'))\r\n            console.log(user);\r\n        if(user){\r\n            const user_id=user.userId;\r\n\r\n            if(user_id){\r\n                console.log(\"user: \",user_id);\r\n                const response=await fetch(\r\n                    'http://localhost:5000/user',\r\n                {\r\n                    method: 'PUT',\r\n                    headers:{'content-type':'application/json'},\r\n                    body:JSON.stringify({\r\n                      id:user_id,\r\n                      cart_id:cart._id})\r\n                })\r\n\r\n\r\n                 if (!response){\r\n                    throw new Error('Updating User failed');\r\n                }\r\n\r\n            }\r\n          }*/\r\n        }\r\n        cart.changed=false;\r\n    }\r\n        try{\r\n            await sendData();\r\n        }catch(error){\r\n        console.log(error);\r\n            /*dispatch(\r\n             uiActions.showNotification({\r\n                status:'error',\r\n                title: 'Error!',\r\n                message: 'Could not send cart data',\r\n            }\r\n            ));*/\r\n        }\r\n    }\r\n  }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}