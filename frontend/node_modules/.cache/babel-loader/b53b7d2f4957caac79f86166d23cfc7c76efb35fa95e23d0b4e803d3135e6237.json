{"ast":null,"code":"import { cartActions } from './cart_slice';\nimport { uiActions } from './ui_slice';\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const id = localStorage.getItem('cartId');\n      const response = await fetch('http://localhost:5000/cart/' + id);\n      if (!response.ok) {\n        throw new Error('could not fetch Cart');\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      console.log(\"in fetch cart--items:\" + cartData[0].items[0].image + \" qty:\" + cartData[0].totalQuantity);\n      dispatch(cartActions.replaceCart({\n        items: cartData[0].items || [],\n        totalQuantity: cartData[0].totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Could not fetch cart data'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  console.log(\"in sendcart\", cart.totalQuantity, cart.items);\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'Pending',\n      title: 'Sending',\n      message: 'Sending cart data'\n    }));\n    const sendData = async () => {\n      const cart_id = JSON.parse(localStorage.getItem('cartId'));\n      console.log(\"cart id\", cart_id);\n      if (cart_id) {\n        console.log(\"put\");\n        const response = await fetch('http://localhost:5000/cart/' + cart_id, {\n          method: 'PUT',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            items: cart.items,\n            totalQuantity: cart.totalQuantity\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Sending cart data failed');\n        }\n      } else {\n        console.log(\"post\");\n        const response = await fetch('http://localhost:5000/cart', {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            items: cart.items,\n            totalQuantity: cart.totalQuantity\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Sending cart data failed');\n        }\n        cart = await response.json();\n        console.log(\"response\", cart._id);\n        localStorage.setItem(\"cartId\", cart._id);\n\n        //get user from local storage if user has already logged in and set cartId in user table\n\n        const user_id = JSON.parse(localStorage.getItem(\"userData.userId\"));\n        if (user_id) {\n          const response = await fetch('http://localhost:5000/user/', {\n            method: 'PUT',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: user_id,\n              cartId: cart._id\n            })\n          });\n          if (!response.ok) {\n            throw new Error('Sending cart data failed');\n          }\n        }\n      }\n      cart.changed = false;\n    };\n    try {\n      await sendData();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Could not send cart data'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["cartActions","uiActions","fetchCartData","dispatch","fetchData","id","localStorage","getItem","response","fetch","ok","Error","data","json","cartData","console","log","items","image","totalQuantity","replaceCart","error","showNotification","status","title","message","sendCartData","cart","sendData","cart_id","JSON","parse","method","headers","body","stringify","_id","setItem","user_id","cartId","changed"],"sources":["C:/manjusha/React/12-adv-starting-project/frontend/src/Store/cart_actions.js"],"sourcesContent":["import { cartActions } from './cart_slice';\r\nimport {uiActions } from './ui_slice';\r\n\r\nexport const fetchCartData=()=>{\r\n    return async (dispatch)=>{\r\n        const fetchData=async()=>{\r\n            const id=localStorage.getItem('cartId');\r\n            const response=await fetch('http://localhost:5000/cart/'+id);\r\n            if(! response.ok){\r\n                throw new Error('could not fetch Cart');\r\n            }\r\n            const data=await response.json();\r\n            return data;\r\n        };\r\n        try{\r\n            const cartData=await fetchData();\r\n        console.log(\"in fetch cart--items:\"+cartData[0].items[0].image+\" qty:\"+cartData[0].totalQuantity);\r\n            dispatch(\r\n                cartActions.replaceCart({\r\n                items:cartData[0].items || [],\r\n                totalQuantity:cartData[0].totalQuantity,\r\n                })\r\n            )\r\n        }catch(error){\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'error',\r\n                title:  'Error!',\r\n                message: 'Could not fetch cart data',\r\n                })\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const sendCartData=(cart)=>{\r\nconsole.log(\"in sendcart\",cart.totalQuantity,cart.items);\r\n\r\n    return async(dispatch) => {\r\n        dispatch(uiActions.showNotification({\r\n            status: 'Pending',\r\n            title: 'Sending',\r\n            message:'Sending cart data',\r\n        }));\r\n\r\n\r\n        const sendData=async()=>{\r\n            const cart_id=JSON.parse(localStorage.getItem('cartId'));\r\n console.log(\"cart id\",cart_id);\r\n            if( cart_id ){\r\nconsole.log(\"put\");\r\n                const response=await fetch(\r\n                    'http://localhost:5000/cart/'+cart_id,\r\n                    {\r\n                        method: 'PUT',\r\n                        headers:{'content-type':'application/json'},\r\n                        body:JSON.stringify({\r\n                          items:cart.items,\r\n                          totalQuantity:cart.totalQuantity\r\n                        })\r\n                    }\r\n                );\r\n                if (!response.ok){\r\n                    throw new Error('Sending cart data failed');\r\n                }\r\n            }\r\n            else\r\n            {\r\nconsole.log(\"post\");\r\n\r\n            const response=await fetch(\r\n                'http://localhost:5000/cart',\r\n                {\r\n                    method: 'POST',\r\n                    headers:{'content-type':'application/json'},\r\n                    body:JSON.stringify({\r\n                      items:cart.items,\r\n                      totalQuantity:cart.totalQuantity\r\n                    })\r\n                }\r\n            );\r\n                if (!response.ok){\r\n                    throw new Error('Sending cart data failed');\r\n                }\r\n                cart= await response.json();\r\n                console.log(\"response\",cart._id);\r\n                localStorage.setItem(\"cartId\",cart._id);\r\n\r\n\r\n//get user from local storage if user has already logged in and set cartId in user table\r\n\r\n            const user_id=JSON.parse(localStorage.getItem(\"userData.userId\"));\r\n            if(user_id){\r\n                const response=await fetch(\r\n                    'http://localhost:5000/user/',\r\n                {\r\n                    method: 'PUT',\r\n                    headers:{'content-type':'application/json'},\r\n                    body:JSON.stringify({\r\n                      id:user_id,\r\n                      cartId:cart._id})\r\n                })\r\n\r\n\r\n                 if (!response.ok){\r\n                    throw new Error('Sending cart data failed');\r\n                }\r\n            }\r\n        }\r\n        cart.changed=false;\r\n}\r\n        try{\r\n            await sendData();\r\n            dispatch(\r\n            uiActions.showNotification({\r\n                status:'success',\r\n                title: 'Success!',\r\n                message: 'Sent cart data successfully',\r\n            }                                                                                                                                   )\r\n            );\r\n\r\n        }catch(error){\r\n            dispatch(\r\n             uiActions.showNotification({\r\n                status:'error',\r\n                title: 'Error!',\r\n                message: 'Could not send cart data',\r\n            }\r\n            ));\r\n        }\r\n    }\r\n  }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}