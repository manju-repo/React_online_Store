{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arnav\\\\IdeaProjects\\\\Adore\\\\React_online_Store\\\\frontend\\\\src\\\\pages\\\\Authentication.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport { json, redirect, useParams, useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../Context/auth-context';\nimport { useContext, useEffect } from 'react';\nimport Notification from '../components/notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AuthenticationPage = () => {\n  _s();\n  const authCtx = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [errors, setErrors] = useState();\n  const [mode, setMode] = useState('login');\n  const [order, setOrder] = useState('');\n  useEffect(() => {\n    // Initialize `mode` and `order` based on query parameters\n    const searchParams = new URLSearchParams(window.location.search);\n    const currentMode = searchParams.get('mode');\n    const currentOrder = searchParams.get('order');\n    setMode(currentMode || 'login');\n    setOrder(currentOrder || '');\n  }, []);\n  useEffect(() => {\n    if (authCtx.isLoggedIn) {\n      navigate('/homepage');\n    }\n  }, [authCtx.isLoggedIn, navigate]);\n  const getData = async formData => {\n    if (mode === 'signup' && formData.password !== formData['confirm_password']) {\n      setErrors(['Password and Confirm Password not matching']);\n      return;\n    }\n    let authData;\n    if (mode === 'signup') {\n      authData = new FormData();\n      authData.append('email', formData.email);\n      authData.append('password', formData.password);\n      authData.append('user_type', formData.user_type);\n      console.log(formData, authData);\n      console.log(authData.get('email'), formData.password);\n      if (mode === 'signup') {\n        authData.append('name', formData.first_name + \" \" + formData.last_name);\n        authData.append('phone', formData.phone);\n        authData.append('profileImage', formData.profileImage[0]);\n        console.log(formData.profileImage[0].name);\n        if (authData.user_type === 'admin' && formData.account_number === formData.confirm_account_number) {\n          authData.append('bus_name', formData.bus_name);\n          authData.append('bus_type', formData.bus_type);\n          authData.append('bus_category', formData.bus_category);\n          authData.append('bus_subcategory', formData.bus_subcategory);\n          authData.append('pan', formData.pan);\n          authData.append('gstin', formData.gstin);\n        }\n        // address is an array like ['Line1', 'Line2', 'City']\n        const addressArray = formData.address;\n        // Loop through the array and append each element separately\n        addressArray.forEach((addressLine, index) => {\n          authData.append(`address[${index}]`, addressLine);\n        });\n        authData.append('account_number', formData.account_number);\n        authData.append('account_holder_name', formData.account_holder_name);\n        authData.append('ifsc_code', formData.ifsc_code);\n      }\n      //first created cart/wishlist/order and then signed up\n      const cart_id = JSON.parse(localStorage.getItem('cartId'));\n      authData.append('cart_id', cart_id || null);\n      const wishlist = JSON.parse(localStorage.getItem('wishlist'));\n      authData.append('wishlist', wishlist || null);\n      const orders = JSON.parse(localStorage.getItem('orders'));\n      authData.append('orders', orders || null);\n    } else if (mode === 'login') {\n      authData = JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        cart_id: JSON.parse(localStorage.getItem('cartId')) || null,\n        wishlist: JSON.parse(localStorage.getItem('wishlist')) || null,\n        orders: JSON.parse(localStorage.getItem('orders')) || null\n      });\n    }\n    console.log(authData);\n    const response = await fetch(`http://localhost:5000/user/${mode}`, {\n      method: 'POST',\n      headers: mode === 'login' ? {\n        'Content-Type': 'application/json'\n      } : {},\n      body: authData\n    });\n    console.log(response);\n    if (!response.ok) {\n      //console.log(response);\n      let errorData = null;\n      try {\n        errorData = await response.json();\n        console.error('Error:', errorData.message);\n      } catch (e) {\n        setErrors(e.message);\n      }\n      setErrors(errorData.message);\n      return;\n      // Handle the error message (e.g., display it to the user)\n      // throw json({message:errorData.message},{status:500});\n    }\n\n    //for admin user sign up create razorpay account\n    if (mode === 'signup' && formData.user_type === 'admin') {\n      try {\n        const acc_response = await fetch('http://localhost:5000/user/createRazorpayAccount', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(authData)\n        });\n        console.log(response);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    try {\n      const resData = await response.json();\n      console.log(\"json response \", resData);\n      const token = resData.token;\n      const userid = resData.userId;\n      const usertype = resData.user_type;\n      const expiration = new Date();\n      expiration.setHours(expiration.getHours() + 1);\n      console.log(usertype);\n      //=========================\n      try {\n        let profileImage;\n        const response = await fetch(`http://localhost:5000/user/${userid}`);\n        if (!response) {\n          throw new Error('Updating User failed');\n        }\n        const respData = await response.json();\n        if (respData) {\n          const loggedUser = respData.user;\n          console.log(loggedUser);\n          const user_cart = loggedUser.cart_id;\n          const user_wl = loggedUser.wishlist;\n          profileImage = loggedUser.profileImage;\n          console.log('Profile ', profileImage);\n          const ordersResp = await fetch(`http://localhost:5000/orders/getActiveOrders/${userid}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          console.log(ordersResp);\n          if (!ordersResp) throw new Error('Could not fetch your orders');\n          const orders = await ordersResp.json();\n          const user_orders = orders.data;\n          console.log(user_orders);\n          localStorage.setItem('avatar', profileImage);\n          console.log(JSON.stringify(profileImage));\n          if (!authCtx.isAdmin && user_cart && JSON.parse(localStorage.getItem('cartId'))) {\n            if (user_cart !== JSON.parse(localStorage.getItem('cartId'))) {\n              let concan = window.confirm(\"Do you want to replace your previous cart with the new one?\");\n              if (concan) {\n                //user_cart=JSON.parse(localStorage.getItem('cartId'));\n                await fetch(`http://localhost:5000/user/cart`, {\n                  method: 'PUT',\n                  headers: {\n                    'content-type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    id: userid,\n                    cart_id: JSON.parse(localStorage.getItem('cartId'))\n                  })\n                });\n              } else localStorage.setItem('cartId', JSON.stringify(user_cart));\n            } else localStorage.setItem('cartId', JSON.stringify(user_cart));\n          }\n          if (!authCtx.isAdmin && user_wl && JSON.parse(localStorage.getItem('Wishlist'))) {\n            if (user_wl !== JSON.parse(localStorage.getItem('Wishlist'))) {\n              let concan = window.confirm(\"Do you want to replace your previous wishlist with the new one?\");\n              if (concan) {\n                //user_wl=JSON.parse(localStorage.getItem('wishlist'));\n                await fetch(`http://localhost:5000/user/wishlist`, {\n                  method: 'PUT',\n                  headers: {\n                    'content-type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    id: userid,\n                    wishlist: JSON.parse(localStorage.getItem('wishlist'))\n                  })\n                });\n              } else localStorage.setItem('wishlist', JSON.stringify(user_wl));\n            } else localStorage.setItem('wishlist', JSON.stringify(user_wl));\n          }\n          if (user_orders) localStorage.setItem('orders', JSON.stringify(user_orders));\n        }\n        authCtx.login(userid, token, expiration, usertype);\n      } catch (error) {\n        console.log(error.message);\n      }\n      //===================\n\n      //authCtx.isAdmin=(usertype==='admin');\n      //console.log(\"admin \",usertype);\n      //console.log(authCtx.isAdmin);\n      if (order && order === 'open') window.history.back();\n      if (usertype === 'admin') {\n        navigate(\"/clientOrders\");\n      } else navigate(\"/homepage\");\n      console.log(token, userid, expiration);\n    } catch (e) {\n      setErrors(e.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errors && /*#__PURE__*/_jsxDEV(Notification, {\n      status: \"error\",\n      message: errors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      onSubmit: getData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n_s(AuthenticationPage, \"XJlkc5dRZFEoVl7Uw38839AQDzY=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["useState","AuthForm","json","redirect","useParams","useNavigate","AuthContext","useContext","useEffect","Notification","jsxDEV","_jsxDEV","Fragment","_Fragment","AuthenticationPage","_s","authCtx","navigate","errors","setErrors","mode","setMode","order","setOrder","searchParams","URLSearchParams","window","location","search","currentMode","get","currentOrder","isLoggedIn","getData","formData","password","authData","FormData","append","email","user_type","console","log","first_name","last_name","phone","profileImage","name","account_number","confirm_account_number","bus_name","bus_type","bus_category","bus_subcategory","pan","gstin","addressArray","address","forEach","addressLine","index","account_holder_name","ifsc_code","cart_id","JSON","parse","localStorage","getItem","wishlist","orders","stringify","response","fetch","method","headers","body","ok","errorData","error","message","e","acc_response","err","resData","token","userid","userId","usertype","expiration","Date","setHours","getHours","Error","respData","loggedUser","user","user_cart","user_wl","ordersResp","user_orders","data","setItem","isAdmin","concan","confirm","id","login","history","back","children","status","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/Arnav/IdeaProjects/Adore/React_online_Store/frontend/src/pages/Authentication.js"],"sourcesContent":["import {useState} from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport {json, redirect, useParams, useNavigate} from'react-router-dom';\r\nimport {AuthContext} from '../Context/auth-context';\r\nimport {useContext, useEffect} from'react';\r\nimport Notification from '../components/notification';\r\n\r\n\r\nconst AuthenticationPage=()=>{\r\nconst authCtx=useContext(AuthContext);\r\nconst navigate= useNavigate();\r\nconst [errors, setErrors]=useState();\r\nconst [mode, setMode] = useState('login');\r\n    const [order, setOrder] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Initialize `mode` and `order` based on query parameters\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const currentMode = searchParams.get('mode');\r\n        const currentOrder = searchParams.get('order');\r\n        setMode(currentMode || 'login');\r\n        setOrder(currentOrder || '');\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (authCtx.isLoggedIn) {\r\n            navigate('/homepage');\r\n        }\r\n    }, [authCtx.isLoggedIn, navigate]);\r\n\r\n    const getData=async(formData)=>{\r\n\r\n     if (mode==='signup' && (formData.password !== formData['confirm_password'])){\r\n         setErrors(['Password and Confirm Password not matching']);\r\n         return;\r\n     }\r\n     let authData;\r\n     if(mode==='signup'){\r\n     authData = new FormData();\r\n     authData.append('email',formData.email);\r\n     authData.append('password',formData.password);\r\n     authData.append('user_type',formData.user_type);\r\n     console.log(formData,authData);\r\nconsole.log(authData.get('email'),formData.password);\r\n     if(mode==='signup'){\r\n        authData.append('name',formData.first_name + \" \" + formData.last_name);\r\n        authData.append('phone',formData.phone);\r\n        authData.append('profileImage',formData.profileImage[0]);\r\nconsole.log(formData.profileImage[0].name);\r\n\r\n        if(authData.user_type==='admin' && (formData.account_number===formData.confirm_account_number)){\r\n            authData.append('bus_name',formData.bus_name);\r\n            authData.append('bus_type',formData.bus_type);\r\n            authData.append('bus_category',formData.bus_category);\r\n            authData.append('bus_subcategory',formData.bus_subcategory);\r\n            authData.append('pan',formData.pan);\r\n            authData.append('gstin',formData.gstin);\r\n        }\r\n        // address is an array like ['Line1', 'Line2', 'City']\r\n            const addressArray = formData.address;\r\n            // Loop through the array and append each element separately\r\n            addressArray.forEach((addressLine, index) => {\r\n                authData.append(`address[${index}]`, addressLine);\r\n            });\r\n\r\n            authData.append('account_number',formData.account_number);\r\n            authData.append('account_holder_name',formData.account_holder_name);\r\n            authData.append('ifsc_code',formData.ifsc_code);\r\n     }\r\n     //first created cart/wishlist/order and then signed up\r\n    const cart_id=JSON.parse(localStorage.getItem('cartId'));\r\n    authData.append('cart_id', cart_id||null);\r\n\r\n    const wishlist=JSON.parse(localStorage.getItem('wishlist'));\r\n    authData.append('wishlist', wishlist||null);\r\n\r\n    const orders=JSON.parse(localStorage.getItem('orders'));\r\n    authData.append('orders',orders||null);\r\n    }\r\n\r\n   else if (mode === 'login') {\r\n        authData = JSON.stringify({\r\n          email: formData.email,\r\n          password: formData.password,\r\n          cart_id: JSON.parse(localStorage.getItem('cartId')) || null,\r\n          wishlist: JSON.parse(localStorage.getItem('wishlist')) || null,\r\n          orders: JSON.parse(localStorage.getItem('orders')) || null,\r\n        });\r\n    }\r\n\r\n    console.log(authData);\r\n     const response= await fetch(`http://localhost:5000/user/${mode}`, {\r\n      method: 'POST',\r\n      headers: mode === 'login' ? { 'Content-Type': 'application/json' } : {},\r\n      body: authData\r\n     });\r\n\r\n\r\n\r\n  console.log(response);\r\n\r\n\r\n       if (!response.ok) {\r\n       //console.log(response);\r\n       let errorData=null;\r\n       try{\r\n          errorData = await response.json();\r\n         console.error('Error:', errorData.message);\r\n         }catch(e){\r\n           setErrors(e.message);\r\n         }\r\n          setErrors(errorData.message);\r\n          return;\r\n         // Handle the error message (e.g., display it to the user)\r\n        // throw json({message:errorData.message},{status:500});\r\n     }\r\n\r\n\r\n//for admin user sign up create razorpay account\r\n if(mode==='signup' && formData.user_type==='admin'){\r\n\r\n    try{\r\n        const acc_response= await fetch('http://localhost:5000/user/createRazorpayAccount', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(authData)\r\n         });\r\n        console.log(response);\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n     try{\r\n       const resData= await response.json();\r\n       console.log(\"json response \",resData);\r\n       const token=resData.token;\r\n       const userid=resData.userId;\r\n       const usertype=resData.user_type;\r\n       const expiration=new Date();\r\n       expiration.setHours(expiration.getHours()+1);\r\n       console.log(usertype);\r\n  //=========================\r\n      try{\r\n        let profileImage;\r\n         const response=await fetch(`http://localhost:5000/user/${userid}`);\r\n          if (!response){\r\n             throw new Error('Updating User failed');\r\n          }\r\n         const respData=await response.json();\r\n         if(respData){\r\n           const loggedUser= respData.user;\r\n           console.log(loggedUser);\r\n           const user_cart= loggedUser.cart_id;\r\n           const user_wl= loggedUser.wishlist;\r\n           profileImage= loggedUser.profileImage;\r\n           console.log('Profile ', profileImage);\r\n                const ordersResp=await fetch(`http://localhost:5000/orders/getActiveOrders/${userid}`,{\r\n                headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json',\r\n                },});\r\n                console.log(ordersResp);\r\n                if(!ordersResp)\r\n                    throw new Error('Could not fetch your orders');\r\n                const orders=await ordersResp.json();\r\n                const user_orders=orders.data;\r\n\r\n                console.log(user_orders);\r\n\r\n           localStorage.setItem('avatar',(profileImage));\r\n           console.log(JSON.stringify(profileImage));\r\n           if(!authCtx.isAdmin && user_cart && JSON.parse(localStorage.getItem('cartId'))){\r\n            if(user_cart !== JSON.parse(localStorage.getItem('cartId'))){\r\n              let concan=window.confirm(\"Do you want to replace your previous cart with the new one?\");\r\n              if(concan){\r\n                   //user_cart=JSON.parse(localStorage.getItem('cartId'));\r\n                    await fetch(\r\n                          `http://localhost:5000/user/cart`,\r\n                      {\r\n                          method: 'PUT',\r\n                          headers:{'content-type':'application/json'},\r\n                          body:JSON.stringify({\r\n                            id:userid,\r\n                            cart_id:JSON.parse(localStorage.getItem('cartId'))})\r\n                      })\r\n              }\r\n              else\r\n                   localStorage.setItem('cartId',JSON.stringify(user_cart));\r\n              }\r\n              else\r\n                   localStorage.setItem('cartId',JSON.stringify(user_cart));\r\n           }\r\n           if(!authCtx.isAdmin && user_wl && JSON.parse(localStorage.getItem('Wishlist'))){\r\n              if(user_wl !== JSON.parse(localStorage.getItem('Wishlist'))){\r\n                  let concan=window.confirm(\"Do you want to replace your previous wishlist with the new one?\");\r\n                  if(concan){\r\n                       //user_wl=JSON.parse(localStorage.getItem('wishlist'));\r\n                       await fetch(\r\n                              `http://localhost:5000/user/wishlist`,\r\n                          {\r\n                              method: 'PUT',\r\n                              headers:{'content-type':'application/json'},\r\n                              body:JSON.stringify({\r\n                                id:userid,\r\n                                wishlist:JSON.parse(localStorage.getItem('wishlist'))})\r\n                          })\r\n                  }\r\n                  else\r\n                       localStorage.setItem('wishlist',JSON.stringify(user_wl));\r\n               }\r\n               else\r\n                  localStorage.setItem('wishlist',JSON.stringify(user_wl));\r\n\r\n           }\r\n\r\n           if(user_orders)\r\n                  localStorage.setItem('orders',JSON.stringify(user_orders));\r\n\r\n         }\r\n       authCtx.login(userid, token, expiration,usertype);\r\n\r\n       }catch(error)\r\n       {\r\n         console.log(error.message);\r\n       }\r\n //===================\r\n\r\n\r\n\r\n       //authCtx.isAdmin=(usertype==='admin');\r\n       //console.log(\"admin \",usertype);\r\n       //console.log(authCtx.isAdmin);\r\n        if(order && order==='open')\r\n            window.history.back();\r\n\r\n        if(usertype==='admin'){\r\n            navigate(\"/clientOrders\");\r\n        }\r\n        else\r\n            navigate(\"/homepage\");\r\n               console.log(token, userid, expiration);\r\n\r\n        }catch(e){\r\n           setErrors(e.message);\r\n\r\n         }\r\n}\r\nreturn (\r\n<>\r\n\r\n   {errors && <Notification status='error' message={errors}/>}\r\n  <AuthForm onSubmit={getData}/>\r\n</>\r\n)\r\n}\r\nexport default AuthenticationPage;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}