{"ast":null,"code":"import { cartActions } from './cart_slice';\nimport { uiActions } from './ui_slice';\nimport { redirect } from 'react-router-dom';\nexport const fetchCartData = id => {\n  console.log(id);\n  return async dispatch => {\n    console.log(id);\n    const fetchData = async () => {\n      const cart_id = id;\n      console.log(id, cart_id);\n      if (cart_id) {\n        const response = await fetch('http://localhost:5000/cart/' + cart_id);\n        console.log(response);\n        if (response) {\n          const respdata = await response.json();\n          if (!respdata.data) {\n            console.log(\"removing cart from local storage\", cart_id);\n            localStorage.removeItem('cartId');\n          }\n          return respdata.data;\n        }\n      }\n      return null;\n    };\n    try {\n      const cartData = await fetchData();\n      console.log(cartData);\n      if (cartData) {\n        dispatch(cartActions.replaceCart({\n          items: cartData.items || [],\n          totalQuantity: cartData.totalQuantity || 0,\n          totalAmount: cartData.totalAmount || 0,\n          isInitial: false\n        }));\n      } else {\n        dispatch(cartActions.replaceCart({\n          items: [],\n          totalQuantity: 0,\n          totalAmount: 0,\n          isInitial: false\n        }));\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch(cartActions.replaceCart({\n        items: [],\n        totalQuantity: 0,\n        totalAmount: 0,\n        isInitial: false\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    /*dispatch(uiActions.showNotification({\r\n        status: 'Pending',\r\n        title: 'Sending',\r\n        message:'Sending cart data',\r\n    }));*/\n\n    const sendData = async () => {\n      if (cart.changed === false) return;\n      //Check if cart id exists in local storage and the same in cart table\n      //const cartIdString = localStorage.getItem('cartId');\n      //const cart_id = cartIdString ? JSON.parse(cartIdString) : null;\n      const cart_id = JSON.parse(localStorage.getItem('cartId'));\n      const response = await fetch('http://localhost:5000/cart/' + cart_id);\n      if (!response) {\n        //exists in localstorage but not in the table, so removing from localstorage\n        let cart_id = null;\n        localStorage.removeItem('cartId');\n      }\n      console.log(cart_id);\n      if (cart_id) {\n        console.log(cart_id);\n\n        //Cart is already created for this user- PUT request to add/delete items to the cart\n\n        // if all items in the cart are deleted, delete record from cart table\n\n        if (cart.items.length === 0) {\n          const response = await fetch(`http://localhost:5000/cart/${cart_id}`, {\n            method: 'DELETE'\n          });\n          localStorage.removeItem('cartId');\n        } else {\n          const response = await fetch('http://localhost:5000/cart/' + cart_id, {\n            method: 'PUT',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              items: cart.items,\n              totalQuantity: cart.totalQuantity,\n              totalAmount: cart.totalAmount\n            })\n          });\n        }\n      } else {\n        // Cart does not exist for this user so creating it with POST request\n        console.log(\"no cart yet\");\n        const response = await fetch('http://localhost:5000/cart', {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            items: cart.items,\n            totalQuantity: cart.totalQuantity,\n            totalAmount: cart.totalAmount\n          })\n        });\n        if (!response) {\n          throw new Error('Sending cart data failed');\n        }\n        cart = await response.json();\n        console.log(\"response\", cart._id);\n        localStorage.setItem(\"cartId\", JSON.stringify(cart._id));\n\n        //get user from local storage if user has already logged in and set cartId in user table\n\n        const user = JSON.parse(localStorage.getItem('userData'));\n        console.log(user);\n        if (user) {\n          const user_id = user.userId;\n          if (user_id) {\n            console.log(\"user: \", user_id);\n            const response = await fetch(`http://localhost:5000/user/cart/${user_id}`, {\n              method: 'PUT',\n              headers: {\n                'content-type': 'application/json'\n              },\n              body: JSON.stringify({\n                cart_id: cart._id\n              })\n            });\n            if (!response) {\n              throw new Error('Updating User failed');\n            }\n          }\n        }\n      }\n    };\n    try {\n      await sendData();\n      dispatch(cartActions.setChanged(false));\n    } catch (error) {\n      console.log(cart.items, cart.changed, cart.isInitial);\n      console.log(error);\n      /*dispatch(\r\n       uiActions.showNotification({\r\n          status:'error',\r\n          title: 'Error!',\r\n          message: 'Could not send cart data',\r\n      }\r\n      ));*/\n    }\n  };\n};","map":{"version":3,"names":["cartActions","uiActions","redirect","fetchCartData","id","console","log","dispatch","fetchData","cart_id","response","fetch","respdata","json","data","localStorage","removeItem","cartData","replaceCart","items","totalQuantity","totalAmount","isInitial","error","sendCartData","cart","sendData","changed","JSON","parse","getItem","length","method","headers","body","stringify","Error","_id","setItem","user","user_id","userId","setChanged"],"sources":["C:/manjusha/React/12-adv-starting-project/frontend/src/Store/cart_actions.js"],"sourcesContent":["import { cartActions } from './cart_slice';\r\nimport {uiActions } from './ui_slice';\r\nimport {redirect} from 'react-router-dom';\r\n\r\nexport const fetchCartData=(id)=>{\r\nconsole.log(id);\r\n    return async (dispatch)=>{\r\n    console.log(id);\r\n\r\n        const fetchData=async()=>{\r\n        const cart_id=id;\r\n        console.log(id, cart_id);\r\n        if (cart_id){\r\n            const response=await fetch('http://localhost:5000/cart/'+cart_id);\r\n            console.log(response);\r\n            if( response){\r\n                const respdata=await response.json();\r\n                if(! respdata.data){\r\n                    console.log(\"removing cart from local storage\",cart_id);\r\n                    localStorage.removeItem('cartId');\r\n                }\r\n                return respdata.data;\r\n            }\r\n        }\r\n        return null;\r\n      };\r\n        try{\r\n            const cartData=await fetchData();\r\n\r\n        console.log(cartData);\r\n        if(cartData){\r\n            dispatch(\r\n                cartActions.replaceCart({\r\n                items:cartData.items || [],\r\n                totalQuantity:cartData.totalQuantity||0,\r\n                totalAmount:cartData.totalAmount||0,\r\n                isInitial:false\r\n                })\r\n             )\r\n          }\r\n          else{\r\n            dispatch(\r\n                  cartActions.replaceCart({\r\n                  items:[],\r\n                  totalQuantity:0,\r\n                  totalAmount:0,\r\n                  isInitial:false\r\n                  })\r\n              )\r\n          }\r\n        }catch(error){\r\n            console.log(error);\r\n            dispatch(\r\n                cartActions.replaceCart({\r\n                items:[],\r\n                totalQuantity:0,\r\n                totalAmount:0,\r\n                isInitial:false\r\n                })\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendCartData=(cart)=>{\r\n    return async(dispatch) => {\r\n        /*dispatch(uiActions.showNotification({\r\n            status: 'Pending',\r\n            title: 'Sending',\r\n            message:'Sending cart data',\r\n        }));*/\r\n\r\n\r\n        const sendData=async()=>{\r\n            if(cart.changed===false) return;\r\n        //Check if cart id exists in local storage and the same in cart table\r\n                //const cartIdString = localStorage.getItem('cartId');\r\n                //const cart_id = cartIdString ? JSON.parse(cartIdString) : null;\r\n            const cart_id=JSON.parse(localStorage.getItem('cartId'));\r\n            const response=await fetch('http://localhost:5000/cart/'+cart_id);\r\n            if(! response){ //exists in localstorage but not in the table, so removing from localstorage\r\n                let cart_id=null;\r\n                localStorage.removeItem('cartId');\r\n            }\r\n            console.log(cart_id);\r\n            if( cart_id ){\r\n                console.log(cart_id);\r\n\r\n        //Cart is already created for this user- PUT request to add/delete items to the cart\r\n\r\n            // if all items in the cart are deleted, delete record from cart table\r\n\r\n                if(cart.items.length===0){\r\n                      const response=await fetch(\r\n                        `http://localhost:5000/cart/${cart_id}`,\r\n                        { method:'DELETE'}\r\n                      );\r\n                      localStorage.removeItem('cartId');\r\n                }\r\n                else{\r\n                const response=await fetch(\r\n                    'http://localhost:5000/cart/'+cart_id,\r\n                    {\r\n                        method: 'PUT',\r\n                        headers:{'content-type':'application/json'},\r\n                        body:JSON.stringify({\r\n                          items:cart.items,\r\n                          totalQuantity:cart.totalQuantity,\r\n                          totalAmount:cart.totalAmount\r\n                        })\r\n                    }\r\n                );\r\n                }\r\n\r\n            }\r\n            else\r\n            {\r\n        // Cart does not exist for this user so creating it with POST request\r\nconsole.log(\"no cart yet\");\r\n            const response=await fetch(\r\n                'http://localhost:5000/cart',\r\n                {\r\n                    method: 'POST',\r\n                    headers:{'content-type':'application/json'},\r\n                    body:JSON.stringify({\r\n                      items:cart.items,\r\n                      totalQuantity:cart.totalQuantity,\r\n                      totalAmount:cart.totalAmount\r\n                    })\r\n                }\r\n            );\r\n                if (!response){\r\n                    throw new Error('Sending cart data failed');\r\n                }\r\n                cart= await response.json();\r\n                console.log(\"response\",cart._id);\r\n                localStorage.setItem(\"cartId\",JSON.stringify(cart._id));\r\n\r\n\r\n//get user from local storage if user has already logged in and set cartId in user table\r\n\r\n            const user=JSON.parse(localStorage.getItem('userData'))\r\n            console.log(user);\r\n        if(user){\r\n            const user_id=user.userId;\r\n\r\n            if(user_id){\r\n                console.log(\"user: \",user_id);\r\n                const response=await fetch(\r\n                    `http://localhost:5000/user/cart/${user_id}`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers:{'content-type':'application/json'},\r\n                    body:JSON.stringify({\r\n                      cart_id:cart._id})\r\n                })\r\n\r\n\r\n                 if (!response){\r\n                    throw new Error('Updating User failed');\r\n                }\r\n\r\n            }\r\n          }\r\n        }\r\n    }\r\n        try{\r\n            await sendData();\r\n            dispatch(cartActions.setChanged(false));\r\n        }catch(error){\r\n        console.log(cart.items, cart.changed, cart.isInitial);\r\n        console.log(error);\r\n            /*dispatch(\r\n             uiActions.showNotification({\r\n                status:'error',\r\n                title: 'Error!',\r\n                message: 'Could not send cart data',\r\n            }\r\n            ));*/\r\n        }\r\n    }\r\n  }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}